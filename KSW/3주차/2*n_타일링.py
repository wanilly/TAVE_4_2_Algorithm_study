# 문제: 2*n 크기의 직사각형을 1*2, 2*1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오
# 출력 - 첫째 줄에 2*n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다. 입력 - 첫째 줄에 n이 주어진다.
# 접근방법: DP로 접근하는데, 다이나믹 프로그래밍의 약자이다. 쉽게 말해서 피보나치 수열이라고 생각하면 된다.
# 그림으로 설명하겠다. 맨 오른쪽에 두는 방법으로 n-1은 이렇게, n-2는 이렇게 된다.
# 식으로 표현해보면 d[n-1], d[n-2] 이렇게 새울 수 있는데, 점화식으로 표현해보면 d[n] = d[n-1] + d[n-2]


def sol(n):
    ans = 0
# n = 1일때, 리턴 값 1
    if n == 1:
        return 1
    if n == 2:
        return 2
    # 해당 값을 리스트에 담아서 3 이상 n+2이하 범위에서 그 값을 리턴해주는 것으로 풀면 답이 나옴
    else:
        DP = [0, 1, 2]
        for i in range(3, n+2):
            DP.append((DP[i-1]+DP[i-2])% 10007)
        return DP[i-1]

    return ans
